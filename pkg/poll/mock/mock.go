// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/readr-media/readr-restful/pkg/poll (interfaces: PollData)

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	poll "github.com/readr-media/readr-restful/pkg/poll"
	reflect "reflect"
)

// MockPollData is a mock of PollData interface
type MockPollData struct {
	ctrl     *gomock.Controller
	recorder *MockPollDataMockRecorder
}

// MockPollDataMockRecorder is the mock recorder for MockPollData
type MockPollDataMockRecorder struct {
	mock *MockPollData
}

// NewMockPollData creates a new mock instance
func NewMockPollData(ctrl *gomock.Controller) *MockPollData {
	mock := &MockPollData{ctrl: ctrl}
	mock.recorder = &MockPollDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPollData) EXPECT() *MockPollDataMockRecorder {
	return m.recorder
}

// Count mocks base method
func (m *MockPollData) Count(arg0 poll.PollParams) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count
func (mr *MockPollDataMockRecorder) Count(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockPollData)(nil).Count), arg0)
}

// Get mocks base method
func (m *MockPollData) Get(arg0 poll.PollParams) ([]poll.PollResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]poll.PollResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockPollDataMockRecorder) Get(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPollData)(nil).Get), arg0)
}

// Insert mocks base method
func (m *MockPollData) Insert(arg0 poll.PollRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert
func (mr *MockPollDataMockRecorder) Insert(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockPollData)(nil).Insert), arg0)
}

// Update mocks base method
func (m *MockPollData) Update(arg0 poll.Poll) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockPollDataMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPollData)(nil).Update), arg0)
}
